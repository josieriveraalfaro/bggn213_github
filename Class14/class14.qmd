---
title: "Class 14: RNASeq Mini Project"
author: "Josie (A11433761)"
format: pdf
---

## Import Data

Counts
Metadata

```{r}
counts<-read.csv("GSE37704_featurecounts.csv", row.names=1)
head(counts)
```
```{r}
metadata<-read.csv("GSE37704_metadata.csv")
head(metadata)
```


## Data Clean up

```{r}
colnames(counts)
```

```{r}
# Take out `length` in colnames to match metadata
countsData<-counts[,-1]
colnames(countsData)
metadata$id

```
```{r}
all(colnames(countsData)==metadata$id)
```

## Filter out zero counts
It's standard practice to remove genes/transcripts that have zero counts in all columns

```{r}
to.keep.inds <- rowSums(countsData)>0
cleanCounts<-countsData[to.keep.inds,]
head(cleanCounts)
```

## Set up for DESeq

```{r}
#| message: false
library(DESeq2)
```

```{r}
dds<-DESeqDataSetFromMatrix(countData=cleanCounts, colData=metadata, design=~condition)
```

## DESeq

```{r}
dds<-DESeq(dds)
res<-results(dds)
```

## Inspect Results


## Data VIz

```{r}
plot(res$log2FoldChange,-log(res$padj))
```

## Pathway Analysis

## Annotation of genes
First I need to translate my Ensemble IDs to my `res` object to Entrez and gene symbol formats
For this, use AnnotationDbi package and it's `mapIDs` function
Let's map to "SYMBOL" and "ENTREZID" and "GENENAME" from our "ENSEMBL" ids

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)

```

```{r}
columns(org.Hs.eg.db)
```
```{r}
res$genename <- mapIds(org.Hs.eg.db,
keys=row.names(res), # Our gene names
keytype="ENSEMBL", # The format of our gene names
column="GENENAME", # The new format we want to add
multiVals="first")

res$symbol <- mapIds(org.Hs.eg.db,
keys=row.names(res), # Our gene names
keytype="ENSEMBL", # The format of our gene names
column="SYMBOL", # The new format we want to add
multiVals="first")

res$entrez <- mapIds(org.Hs.eg.db,
keys=row.names(res), # Our gene names
keytype="ENSEMBL", # The format of our gene names
column="ENTREZID", # The new format we want to add
multiVals="first")

```

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
#kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
#head(kegg.sets.hs, 3)
```

Let's save our top genes to a CSV file

```{r}
top.inds<- ((abs(res$log2FoldChange) > 2) & res$padj<0.05)

top.inds[is.na(top.inds)]<-FALSE

top.genes<-res[top.inds,]
write.csv(top.genes, file="top_geneset.csv")
```


Now we can do our pathway analysis

```{r}
kegg.sets.hs=kegg.sets.hs[sigmet.idx.hs]
```

The **gage** function wants a vector of importance as input with gene names as labels-KEGG speaks Entrez
```{r}
foldchanges<- res$log2FoldChange
names(foldchanges)<- res$entrez
head(foldchanges)
```

```{r}
keggres<- gage(foldchanges, gsets= kegg.sets.hs)
attributes(keggres)
```

```{r}
head(keggres$less)
```
hsa04110 Cell cycle 
```{r}
pathview(foldchanges,pathway.id = "hsa04110")
```

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

To run reactome online we need to make a little text file with a gene id per line

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```


![](cell_cycle_pathway.png)





